	-- molten setup: disabled because the experience kinda sucks
	-- installation steps:
	--
	--
	--deps:
	--ipynb
	-- molten
	-- 	image.nvim
	-- 		imagemagick
	--
	--
	-- issues:
	-- 	cannot activate environment from ipynb, has to be py
	-- 	even after activation, I get "no such kernel named default"
	-- 	
	-- 	auto-session seems to conflict with molten
	-- 	not diplaying pandas stuff correctly
	--
	-- steps
	-- 	sudo apt install imagemagick
	-- 	install python deps for molten in a virtual env
	-- 		mkdir ~/.virtualenvs
	-- 		python -m venv ~/.virtualenvs/neovim # create a new venv
	-- 		# note, activate is a bash/zsh script, use activate.fish for fish shell
	-- 		source ~/.virtualenvs/neovim/bin/activate # activate the venv
	-- 		pip install pynvim jupyter_client cairosvg plotly kaleido pnglatex pyperclip
	-- 		
	-- 		IMPORTANT!!!
	-- 			if not exists: create directory /home/leo/.local/share/jupyter/runtime 
	-- 
	-- 	in project env:
	-- 		https://github.com/benlubas/molten-nvim/blob/main/docs/Virtual-Environments.md
	-- 		
	-- 		
	-- 		install ipykernel
	-- 		python -m ipykernel install --user --name project_name
	-- 		install jupytext
	-- 		

	-- lazy code:
	--
	-- {
	-- 	"3rd/image.nvim",
	-- 	build = false, -- so that it doesn't build the rock https://github.com/3rd/image.nvim/issues/91#issuecomment-2453430239
	-- 	opts = {
	-- 		processor = "magick_cli",
	-- 	},
	-- 	config = function()
	-- 		require("image").setup({
	-- 			backend = "kitty", -- or "ueberzug" or "sixel"
	-- 			processor = "magick_cli", -- or "magick_rock"
	-- 			integrations = {
	-- 				markdown = {
	-- 					enabled = true,
	-- 					clear_in_insert_mode = false,
	-- 					download_remote_images = true,
	-- 					only_render_image_at_cursor = false,
	-- 					only_render_image_at_cursor_mode = "popup", -- or "inline"
	-- 					floating_windows = false, -- if true, images will be rendered in floating markdown windows
	-- 					filetypes = { "markdown", "vimwiki" }, -- markdown extensions (ie. quarto) can go here
	-- 				},
	-- 				neorg = {
	-- 					enabled = true,
	-- 					filetypes = { "norg" },
	-- 				},
	-- 				typst = {
	-- 					enabled = true,
	-- 					filetypes = { "typst" },
	-- 				},
	-- 				html = {
	-- 					enabled = false,
	-- 				},
	-- 				css = {
	-- 					enabled = false,
	-- 				},
	-- 			},
	-- 			-- some of these options were tweaked to better fit molten.nvim
	-- 			max_width = 100,              -- tweak to preference
	-- 			max_height = 12,              -- ^
	-- 			max_height_window_percentage = math.huge, -- this is necessary for a good experience
	-- 			max_width_window_percentage = math.huge,
	-- 			window_overlap_clear_enabled = true,
	-- 			scale_factor = 1.0,
	-- 			window_overlap_clear_ft_ignore = {
	-- 				"cmp_menu",
	-- 				"cmp_docs",
	-- 				"snacks_notif",
	-- 				"scrollview",
	-- 				"scrollview_sign",
	-- 			},
	-- 			editor_only_render_when_focused = false,                                -- auto show/hide images when the editor gains/looses focus
	-- 			tmux_show_only_in_active_window = false,                                -- auto show/hide images in the correct Tmux window (needs visual-activity off)
	-- 			hijack_file_patterns = { "*.png", "*.jpg", "*.jpeg", "*.gif", "*.webp", "*.avif" }, -- render image files as images when opened
	-- 		})
	-- 	end,
	-- },
	--
	-- {
	-- 	"quarto-dev/quarto-nvim",
	--
	-- 	dependencies = {
	-- 		"jmbuhr/otter.nvim",
	-- 		"nvim-treesitter/nvim-treesitter",
	-- 	},
	-- 	ft = { "quarto", "markdown" },
	-- 	config = function()
	-- 		local quarto = require("quarto")
	-- 		quarto.setup({
	-- 			lspFeatures = {
	-- 				-- NOTE: put whatever languages you want here:
	-- 				languages = { "r", "python", "rust" },
	-- 				chunks = "all",
	-- 				diagnostics = {
	-- 					enabled = true,
	-- 					triggers = { "BufWritePost" },
	-- 				},
	-- 				completion = {
	-- 					enabled = true,
	-- 				},
	-- 			},
	-- 			keymap = {
	-- 				-- NOTE: setup your own keymaps:
	-- 				hover = "H",
	-- 				definition = "gd",
	-- 				rename = "<leader>rn",
	-- 				references = "gr",
	-- 				format = "<leader>gf",
	-- 			},
	-- 			codeRunner = {
	-- 				enabled = true,
	-- 				default_method = "molten",
	-- 			},
	-- 		})
	--
	-- 		local runner = require("quarto.runner")
	-- 		vim.keymap.set("n", "<localleader>rc", runner.run_cell, { desc = "run cell", silent = true })
	-- 		vim.keymap.set("n", "<localleader>ra", runner.run_above, { desc = "run cell and above", silent = true })
	-- 		vim.keymap.set("n", "<localleader>rA", runner.run_all, { desc = "run all cells", silent = true })
	-- 		vim.keymap.set("n", "<localleader>rl", runner.run_line, { desc = "run line", silent = true })
	-- 		vim.keymap.set("v", "<localleader>r", runner.run_range, { desc = "run visual range", silent = true })
	-- 		vim.keymap.set("n", "<localleader>RA", function()
	-- 			runner.run_all(true)
	-- 		end, { desc = "run all cells of all languages", silent = true })
	-- 	end,
	-- },
	-- {
	-- 	"GCBallesteros/jupytext.nvim",
	-- 	config = function()
	-- 		require("jupytext").setup({
	-- 			style = "markdown",
	-- 			output_extension = "md",
	-- 			force_ft = "markdown",
	-- 		})
	-- 	end,
	-- 	-- Depending on your nvim distro or config you may need to make the loading not lazy
	-- 	-- lazy=false,
	-- },
	-- {
	-- 	"benlubas/molten-nvim",
	-- 	version = "^1.0.0", -- use version <2.0.0 to avoid breaking changes
	-- 	build = ":UpdateRemotePlugins",
	-- 	init = function()
	-- 		-- this is an example, not a default. Please see the readme for more configuration options
	-- 		vim.g.molten_output_win_max_height = 12
	-- 		-- activate the following line to change neovim's python env, but be careful that this env include ALL necessary packages, even those required by other neovim plugins!
	-- 		-- vim.g.python3_host_prog = vim.fn.expand("C:\\Users\\lpaal\\miniconda3\\envs\\neovim\\python")
	-- 		vim.keymap.set("n", "<localleader>ip", function()
	-- 			local venv = os.getenv("VIRTUAL_ENV") or os.getenv("CONDA_PREFIX")
	-- 			print(venv)
	--
	-- 			if venv ~= nil then
	-- 				-- in the form of /home/benlubas/.virtualenvs/VENV_NAME
	-- 				venv = string.match(venv, "/.+/(.+)")
	-- 				vim.cmd(("MoltenInit %s"):format(venv))
	-- 			else
	-- 				vim.cmd("MoltenInit python3")
	-- 			end
	-- 		end, { desc = "Initialize Molten for python3", silent = true })
	--
	-- 		vim.keymap.set("n", "<localleader>mi", ":MoltenInit<CR>", { silent = true, desc = "Initialize the plugin" })
	-- 		vim.keymap.set(
	-- 			"n",
	-- 			"<localleader>e",
	-- 			":MoltenEvaluateOperator<CR>",
	-- 			{ silent = true, desc = "run operator selection" }
	-- 		)
	-- 		vim.keymap.set("n", "<localleader>rl", ":MoltenEvaluateLine<CR>", { silent = true, desc = "evaluate line" })
	-- 		vim.keymap.set(
	-- 			"n",
	-- 			"<localleader>rr",
	-- 			":MoltenReevaluateCell<CR>",
	-- 			{ silent = true, desc = "re-evaluate cell" }
	-- 		)
	-- 		vim.keymap.set(
	-- 			"v",
	-- 			"<localleader>r",
	-- 			":<C-u>MoltenEvaluateVisual<CR>gv",
	-- 			{ silent = true, desc = "evaluate visual selection" }
	-- 		)
	-- 	end,
	-- 	config = function()
	-- 		-- for molten use with notebooks
	-- 		-- see https://github.com/benlubas/molten-nvim/blob/main/docs/Notebook-Setup.md
	--
	-- 		vim.g.molten_auto_open_output = true
	--
	-- 		-- this guide will be using image.nvim
	-- 		-- Don't forget to setup and install the plugin if you want to view image outputs
	-- 		vim.g.molten_image_provider = "image.nvim"
	--
	-- 		-- optional, I like wrapping. works for virt text and the output window
	-- 		vim.g.molten_wrap_output = true
	--
	-- 		-- Output as virtual text. Allows outputs to always be shown, works with images, but can
	-- 		-- be buggy with longer images
	-- 		vim.g.molten_virt_text_output = true
	--
	-- 		-- this will make it so the output shows up below the \`\`\` cell delimiter
	-- 		vim.g.molten_virt_lines_off_by_1 = true
	--
	-- 		vim.keymap.set(
	-- 			"n",
	-- 			"<localleader>rr",
	-- 			":MoltenReevaluateCell<CR>",
	-- 			{ desc = "re-eval cell", silent = true }
	-- 		)
	-- 		vim.keymap.set(
	-- 			"v",
	-- 			"<localleader>r",
	-- 			":<C-u>MoltenEvaluateVisual<CR>gv",
	-- 			{ desc = "execute visual selection", silent = true }
	-- 		)
	-- 		vim.keymap.set(
	-- 			"n",
	-- 			"<localleader>oh",
	-- 			":MoltenHideOutput<CR>",
	-- 			{ desc = "close output window", silent = true }
	-- 		)
	-- 		vim.keymap.set("n", "<localleader>md", ":MoltenDelete<CR>", { desc = "delete Molten cell", silent = true })
	--
	-- 		-- if you work with html outputs:
	-- 		vim.keymap.set(
	-- 			"n",
	-- 			"<localleader>mx",
	-- 			":MoltenOpenInBrowser<CR>",
	-- 			{ desc = "open output in browser", silent = true }
	-- 		)
	-- 	end,
	-- },
	-- {
	--     "lervag/vimtex",
	--     lazy = false, -- we don't want to lazy load VimTeX
	--     -- tag = "v2.15", -- uncomment to pin to a specific release
	--     init = function()
	--         -- VimTeX configuration goes here, e.g.
	--
	--         -- vim.g.vimtex_view_general_viewer = 'okular'
	--         -- vim.g.vimtex_view_general_options = '--unique file:@pdf#src:@line@tex'
	--
	--         vim.g.vimtex_view_general_viewer = 'sumatraPDF'
	--         vim.g.vimtex_view_general_options = '-reuse-instance @pdf'
	--
	--         -- vim.g.vimtex_compiler_method = "latexpdf"
	--         -- spellcheck
	--
	--         -- vim.keymap.set("n", "<leader>lr", function()
	--         --     local cwd = vim.fn.getcwd()
	--         --     vim.cmd('!start cmd.exe /K "cd ' .. cwd .. ' && pdflatex Thesis.tex"')
	--         -- end, { silent = true })
	--
	--
	--         vim.api.nvim_create_user_command('RunPdfLatex', function()
	--             local file = vim.fn.expand('%')
	--             if file == '' then
	--                 print("No file to compile!")
	--                 return
	--             end
	--             print("Running pdflatex on " .. file)
	--             vim.fn.jobstart({ 'pdflatex', file }, {
	--                 stdout_buffered = true,
	--                 stderr_buffered = true,
	--                 on_stdout = function(_, data)
	--                     if data then
	--                         print(table.concat(data, '\n'))
	--                     end
	--                 end,
	--                 on_stderr = function(_, data)
	--                     if data then
	--                         vim.notify(table.concat(data, '\n'), vim.log.levels.ERROR)
	--                     end
	--                 end,
	--                 on_exit = function(_, code)
	--                     if code == 0 then
	--                         print("pdflatex compilation succeeded.")
	--                     else
	--                         print("pdflatex compilation failed.")
	--                     end
	--                 end,
	--             })
	--         end, { desc = "Run pdflatex on the current file" })
	--
	--         -- shortcut to rerun pdflatex on current file
	--         vim.api.nvim_set_keymap('n', '<localleader>lr', ':RunPdfLatex<CR>', { noremap = true, silent = true })
	--
	--
	--         vim.api.nvim_create_user_command("CheckThesis", function()
	--             local cmd =
	--             [[java -jar "C:\Program Files\textidote\textidote.jar" --output html Thesis.tex > "C:\Users\lpaal\Downloads\report.html" & cmd /c start "" "C:\Users\lpaal\Downloads\report.html"]]
	--             vim.fn.system(cmd)
	--             print("Textidote check complete! Report opened.")
	--         end, {})
	--
	--         vim.api.nvim_set_keymap('n', '<localleader>lg', ':CheckThesis<CR>', { noremap = true, silent = true })
	--
	--         --
	--         -- vim.g.vimtex_view_general_options_latexmk = '-reuse-instance'
	--         -- vim.g.vimtex_view_method = "sumatrapdf"
	--     end
	-- },
	--

